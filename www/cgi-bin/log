#!/bin/sh
# ########################################################################### #
# Bourne shell script to send the log retrieval web page frame and launch the #
#    script that retrieves the relevant downtime, SAM-ETF, SAM service/site   #
#    evaluation, and HammerCloud documents from CERN MonIT/HDFS and writes    #
#    the main <DIV> HTML section.                                             #
#                                                                             #
# 2019-Apr-12   Stephan Lammel                                                #
# ########################################################################### #
ERROR_MSG=""



# parameters:
# ===========
FS="";read -r -d "" METRIC_SUPPORT << METRIC_SUPPORT_EOF
etf15min:etf:900:SAM-ETF result(s):
down15min:down:900:Downtime(s):
sam15min:sam:900:SAM 15 min evaluation(s):
sam1hour:sam:3600:SAM 1 hour evaluation(s):
sam6hour:sam:21600:SAM 6 hours evaluation(s):
sam1day:sam:86400:SAM 1 day evaluation(s):
hc15min:hc:900:HammerCloud 15 min:
hc1hour:hc:3600:HammerCloud 1 hour:
hc6hour:hc:21600:HammerCloud 6 hours:
hc1day:hc:86400:HammerCloud 1 day:
fts15min:fts:900:FTS 15 min evaluation(s):
fts1hour:fts:3600:FTS 1 hour evaluation(s):
fts6hour:fts:21600:FTS 6 hours evaluation(s):
fts1day:fts:86400:FTS 1 day evaluation(s):
sr15min:sr:900:SiteReadiness 15 min evaluation(s):
sr1hour:sr:3600:SiteReadiness 1 hour evaluation(s):
sr6hour:sr:21600:SiteReadiness 6 hours evaluation(s):
sr1day:sr:86400:SiteReadiness 1 day evaluation(s):
sts15min:sts:900:SiteStatus 15 min evaluation(s):
links15min:fts:900:Links 15 min evaluation(s):
links1hour:fts:3600:Links 1 hour evaluation(s):
links6hour:fts:21600:Links 6 hours evaluation(s):
links1day:fts:86400:Links 1 day evaluation(s):
METRIC_SUPPORT_EOF
#
LOGSECTION_URL="https://cmssst.web.cern.ch/cmssst/cache"
LOGSECTION_URL="https://test-cmssst.web.cern.ch/cache"
LOGSECTION_DIR="/eos/user/c/cmssst/www/cache"
#
KRB5_KEYTAB="/eos/user/c/cmssst/private/cmssstro.keytab"
# ########################################################################### #



# parse arguments:
# ================
REQUEST_INFO=`/usr/bin/awk -F: 'BEGIN{now=systime();tzc=now-mktime(strftime("%Y %m %d %H %M %S",now,1));n=split(ENVIRON["PATH_INFO"],a,"/");if(a[1]!=""){i=1}else{i=2};if(n-i<2)exit;l=length(a[i+1]);if(l<=8){lm=length(a[i]);m5=substr(a[i],lm-4,lm);m4=substr(a[i],lm-3,lm);if(m5=="15min"){tis=a[i+1]*900}else{if(m5=="1hour"){tis=a[i+1]*3600}else{if(m5=="6hour"){tis=a[i+1]*21600}else{if(m4=="1day"){tis=a[i+1]*86400}else{exit}}}}}else{if(l==10){tis=a[i+1]}else{if(l==12){tis=mktime(substr(a[i+1],1,4)" "substr(a[i+1],5,2)" "substr(a[i+1],7,2)" "substr(a[i+1],9,2)" "substr(a[i+1],11,2)" 00")+tzc}else{if(l==14){tis=mktime(substr(a[i+1],1,4)" "substr(a[i+1],5,2)" "substr(a[i+1],7,2)" "substr(a[i+1],9,2)" "substr(a[i+1],11,2)" "substr(a[i+1],13,2))+tzc}else{exit}}}};if((a[i+2]=="*")||(tolower(a[i+2])=="all")){esn="all"}else{esn=a[i+2];if(substr(a[i+2],1,1)substr(a[i+2],3,4)==toupper(substr(a[i+2],1,1)"_"substr(a[i+2],4,2)"_")){typ="site"}else{if(index(a[i+2],".")==0){exit}else{typ="any"}}};bfr=0;afr=0;opt=":";for(j=i+3;j<=n;j++){aup=toupper(a[j]);alo=tolower(a[j]);if((a[j]=="*")||(alo=="any")){typ="any"}else{if((aup=="SRM")||(aup=="SE")){typ="SRM"}else{if(aup=="CE"){typ="CE"}else{if(aup=="XROOTD"){typ="XROOTD"}else{if(alo=="site"){typ="site"}else{if(substr(a[j],1,4)=="org."){typ=substr(a[j],9)}else{if((substr(a[j],1,7)=="CONDOR-")||(substr(a[j],1,3)=="WN-")||(substr(a[j],1,4)=="SRM-")||(substr(a[j],1,3)=="SE-")){typ=a[j]}else{idx=index(a[j],"+");if(idx>0){split(a[j],tmp,"+");if(tmp[1]!="")bfr=tmp[1];if(tmp[2]!="")afr=tmp[2]}else{if((alo=="refetch")||(alo=="nocache")){opt=opt"nocache:"}else{if(alo=="debug"){opt=opt"debug:"}else{if(a[j]!="")exit}}}}}}}}}}}print "/"a[i]"/"tis"/"esn"/"typ"/"bfr"+"afr"/ "opt}' 2>/dev/null`
if [ -n "${REQUEST_INFO}" ];then
   REQUEST_PATH=`echo "${REQUEST_INFO}" | /usr/bin/awk '{print $1; exit}'`
   REQUEST_OPTN=`echo "${REQUEST_INFO}" | /usr/bin/awk '{print $2; exit}'`
   REQUEST_HASH=`(echo -n "${REQUEST_PATH}" | /usr/bin/sha1sum | /usr/bin/awk '{print $1; exit}') 2>/dev/null`
   CONTENT_FILE="log_${REQUEST_HASH}.htm"
   CONTENT_LOCK="log_${REQUEST_HASH}.lck"
   REQUEST_TITL=`(echo -e "${METRIC_SUPPORT}" | /usr/bin/awk -F: -v rp="${REQUEST_PATH}" 'BEGIN{split(rp,a,"/");ts=strftime("%Y-%b-%d %H:%M:%S",a[3],1)}{if($1==a[2]){print $4" of "a[4]" / "a[5]" for "ts" UTC";exit}}') 2>/dev/null`
   if [ -z "${REQUEST_TITL}" ];then
      ERROR_MSG="Unsupported metric: \"${REQUEST_PATH}\""
   fi
else
   ERROR_MSG="Bad log retrieval parameter(s): \"${PATH_INFO}\""
fi
# ########################################################################### #



# check/acquire kerberos ticket:
# ==============================
KRB5CCNAME="FILE:/tmp/krb5cc_122350";export KRB5CCNAME
#
KRB5_LIFETIME=`(/usr/bin/klist -c | /usr/bin/awk 'BEGIN{tis=0}{if($NF=="krbtgt/CERN.CH@CERN.CH"){split($(NF-2),d,"/");if(length(d[3])==2){d[3]="20"d[3]};split($(NF-1),t,":");ds=d[3]" "d[1]" "d[2]" "t[1]" "t[2]" "t[3];tis=mktime(ds)-systime();exit}}END{print tis}') 2>/dev/null`
if [ ${KRB5_LIFETIME} -lt 900 ]; then
   /usr/bin/kinit -kt ${KRB5_KEYTAB} cmssstro 1>/dev/null 2>&1
   if [ $? -ne 0 ]; then
      ERROR_MSG="Kerberos initialization failed"
   fi
fi
# ########################################################################### #



# write body of page (with JavaScript to fetch section with log info):
# ====================================================================
(echo "${REQUEST_OPTN}" | /bin/grep ":debug:") 1>/dev/null 2>&1
if [ $? -eq 0 ]; then
   echo -e "Content-type: text/plain\n\n"
   #
   /bin/date +"%Y-%b-%d %H:%M:%S"
   #
   echo "PATH_INFO     = ${PATH_INFO}"
   echo "REQUEST_INFO  = ${REQUEST_INFO}"
   echo "REQUEST_PATH  = ${REQUEST_PATH}"
   echo "REQUEST_OPTN  = ${REQUEST_OPTN}"
   echo "REQUEST_HASH  = ${REQUEST_HASH}"
   echo "CONTENT_FILE  = ${CONTENT_FILE}"
   echo "CONTENT_LOCK  = ${CONTENT_LOCK}"
   echo "REQUEST_TITL  = ${REQUEST_TITL}"
   echo ""
   echo "KRB5_LIFETIME = ${KRB5_LIFETIME}"
   echo ""
   echo ""
   exec 2>&1
fi

echo -e "Content-type: text/html\n\n"

if [ -n "${ERROR_MSG}" ];then
   echo -e "<HTML lang=en>\n<HEAD>\n   <META charset=\"UTF-8\">\n   <TITLE>CMSSST Log Retrieval Error Report</TITLE>\n   <META NAME=\"robots\" CONTENT=\"noindex,nofollow\">\n   <META HTTP-EQUIV=\"content-type\" CONTENT=\"text/html;CHARSET=iso8859-1\">\n   </HEAD>\n\n<BODY BGCOLOR=\"#FFFFFF\" TEXT=\"#000000\">\n"
   echo -e "<H1>\n   <CENTER>CMS Log Retrieval</H1>\n\n<SPAN STYLE=\"color:#cc0000; font-weight:bold;\">ERROR: ${ERROR_MSG}</SPAN><BR>\n"
   echo -e "<HR>\n\n<SMALL>\n   <A HREF=\"http://cern.ch/copyright\">&copy; Copyright author, CMS, Fermilab, and others 2019</A>\n</SMALL>\n</BODY>\n</HTML>\n"
   exit 0
fi

echo -e "<HTML lang=en>\n<HEAD>\n   <META charset=\"UTF-8\">\n   <TITLE>CMS Log Retrieval</TITLE>\n   <STYLE TYPE=\"text/css\">\n      BODY {\n         background-color: white\n      }\n      A, A:LINK, A:VISITED {\n         color:black; text-decoration:none\n      }\n      TD A, TD A:LINK, TD A:VISITED {\n         color:black; text-decoration:none\n      }\n   </STYLE>\n</HEAD>"

echo -e "<BODY ONLOAD=\"fillPage()\">\n<H1>\n   <CENTER>CMS Log Retrieval\n      <SPAN STYLE=\"white-space:nowrap; font-size:75%;\">${REQUEST_TITL}</SPAN>\n   </CENTER>\n</H1>\n\n<DIV ID=\"ContentDIV\"></DIV>\n<HR>\n\n<SMALL>\n   <A HREF=\"http://cern.ch/copyright\">&copy; Copyright author, CMS, Fermilab, and others 2019</A>\n</SMALL>"

echo -e "<SCRIPT type=\"text/javascript\" language=\"javascript\">\n   \"use strict\";\n\n   var myContentURL = \"${LOGSECTION_URL}/${CONTENT_FILE}\";\n   //\n   var myStartTmS = (new Date).getTime();\n   var myTimeout = null;\n   var myProgress = null;\n   var mySpinning = 0;\n   var myContentLCK = myContentURL.substring(0, myContentURL.length - 3) + \"lck\";\n"

echo -e "   function updateStatus() {\n      var myCurrnTmS = (new Date).getTime();\n      var myContent;\n      if (myProgress) {\n         myContent = \"<SPAN STYLE=\\\"color:#ff8000; font-weight:bold; font-size:20px;\\\">Requested log document(s) are being retrieved from CERN MonIT, please wait.<BR>This will take several seconds ...\";\n      } else {\n         myContent = \"<SPAN STYLE=\\\"color:#ff8000; font-weight:bold; font-size:20px;\\\">Waiting for log document(s) retrieval process to load from CERN EOS ...\";\n      }\n      for ( var myCnt=3000; myCnt<(myCurrnTmS-myStartTmS); myCnt += 1000 ) {\n         if ( (myCnt % 60000) == 0 ) {\n            myContent += \" \";\n         } else {\n            myContent += \".\";\n         }\n      }\n      if ( mySpinning == 0 ) {\n         myContent += \"/\";\n      } else if ( mySpinning == 1 ) {\n         myContent += \"-\";\n      } else if ( mySpinning == 2 ) {\n         myContent += \"\\\\\\\";\n      } else {\n         myContent += \"|\";\n      }\n      mySpinning = (mySpinning + 1) % 4\n      myContent += \"</SPAN><BR>\"\n      if (myProgress) {\n         myContent += \"<HR><PRE>\" + myProgress + \"</PRE>\";\n      }\n      document.getElementById(\"ContentDIV\").innerHTML = myContent;\n      //\n      myTimeout = setTimeout(updateStatus, 250);\n   }\n"
echo -e "   function updatePage() {\n      var xhttprObj = new XMLHttpRequest();\n      xhttprObj.open(\"GET\", myContentURL, true);\n      xhttprObj.onreadystatechange = function () {\n         if (this.readyState == 4) {\n            if (this.status == 200) {\n               if (myTimeout) {\n                  clearTimeout(myTimeout)\n               }\n               document.getElementById(\"ContentDIV\").innerHTML = this.responseText;\n            } else {\n               var xhttprObj = new XMLHttpRequest();\n               xhttprObj.open(\"GET\", myContentLCK, true);\n               xhttprObj.onreadystatechange = function () {\n                  if (this.readyState == 4) {\n                     if (this.status == 200) {\n                        myProgress = this.responseText;\n                     }\n                     //\n                     var myCurrnTmS = (new Date).getTime();\n                     if (myCurrnTmS < myStartTmS + 300000) {\n                        setTimeout(updatePage, 5000);\n                     } else {\n                        if (myTimeout) {\n                           clearTimeout(myTimeout)\n                        }\n                        document.getElementById(\"ContentDIV\").innerHTML = \"<SPAN STYLE=\\\"color:#cc0000; font-weight:bold; font-size:20px;\\\">Timeout fetching requested log document(s)!</SPAN>\";\n                     }\n                  }\n               };\n               xhttprObj.timeout = 10000;\n               xhttprObj.send();\n            }\n         }\n      };\n      xhttprObj.timeout = 10000;\n      xhttprObj.send();\n   }\n"
echo -e "   function fillPage() {\n      updateStatus();\n      updatePage();\n   }\n</SCRIPT>\n"

echo -e "</BODY>\n</HTML>"



# check if we need to retrieve logs:
# ==================================
LOCK_INFO=`(/usr/bin/stat -c "%Y %i" ${LOGSECTION_DIR}/${CONTENT_LOCK} | /usr/bin/awk '{print int(systime()-$1),$2;exit}')2>/dev/null`
(/bin/touch -c ${LOGSECTION_DIR}/${CONTENT_FILE}) 1>/dev/null 2>&1
if [ -e ${LOGSECTION_DIR}/${CONTENT_FILE} ];then
   (echo "${REQUEST_OPTN}" | /bin/grep ":nocache:") 1>/dev/null 2>&1
   if [ $? -eq 0 ]; then
      /bin/rm -f ${LOGSECTION_DIR}/${CONTENT_FILE}
   else
      exit 0
   fi
elif [ -n "${LOCK_INFO}" ]; then
   LOCK_AGE=`echo ${LOCK_INFO} | /usr/bin/awk '{print $1; exit}' 2>/dev/null`
   if [ ${LOCK_AGE} -gt 900 ]; then
      LOCK_INO=`echo ${LOCK_INFO} | /usr/bin/awk '{print $2; exit}' 2>/dev/null`
      /usr/bin/find ${LOGSECTION_DIR} -inum ${LOCK_INO} -exec /bin/rm -f {} \;
   else
      exit 0
   fi
fi



# acquire retrieval lock:
# =======================
PID=$$
/bin/ln -s ${PID} ${LOGSECTION_DIR}/${CONTENT_LOCK}
if [ $? -eq 0 ]; then
   LOCK_INFO=`(/bin/ls -il ${LOGSECTION_DIR}/${CONTENT_LOCK} | /usr/bin/awk '{print $1,$NF;exit}') 2>/dev/null`
   LOCK_INO=`echo ${LOCK_INFO} | /usr/bin/awk '{print $1; exit}' 2>/dev/null`
   LOCK_PID=`echo ${LOCK_INFO} | /usr/bin/awk '{print $2; exit}' 2>/dev/null`
   if [ "${LOCK_PID}" != "${PID}" ]; then
      exit 0
   fi
else
   exit 0
fi



# launch log retrieval:
# =====================
(echo "${REQUEST_OPTN}" | /bin/grep ":debug:") 1>/dev/null 2>&1
if [ $? -eq 0 ]; then
   echo -e "\nLaunching keep-alive background process"
   (while true; do /bin/sleep 5; echo -e "\x00"; done) 2>/dev/null &
   CPID=$!
   #
   echo -e "\n/usr/bin/timeout 900 /eos/user/c/cmssst/www/cgi-bin/log_fetcher.py -vvvv -p ${REQUEST_PATH} -H ${LOGSECTION_DIR}/${CONTENT_FILE}"
   /bin/date +"%Y-%b-%d %H:%M:%S"
   /usr/bin/timeout 900 /eos/user/c/cmssst/www/cgi-bin/log_fetcher.py -vvvv -p ${REQUEST_PATH} -H ${LOGSECTION_DIR}/${CONTENT_FILE}
   #
   echo -e "\Stopping keep-alive background process"
   kill -9 ${CPID}
   /usr/bin/find ${LOGSECTION_DIR} -inum ${LOCK_INO} -exec /bin/rm -f {} \;
else
   (
   /usr/bin/timeout 900 /eos/user/c/cmssst/www/cgi-bin/log_fetcher.py -v -p ${REQUEST_PATH} -H ${LOGSECTION_DIR}/${CONTENT_FILE} -L ${LOGSECTION_DIR}/${PID}
   /usr/bin/find ${LOGSECTION_DIR} -inum ${LOCK_INO} -exec /bin/rm -f {} \;
   /bin/rm -f ${LOGSECTION_DIR}/${PID} 1>/dev/null 2>&1
   ) 1>/dev/null 2>&1 &
   exec 1>&- 2>&-
fi
